{
	"name": "FACT_EPISODES",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet8",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Parquet10",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable22",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          tconst as string,",
				"          titleType as string,",
				"          primaryTitle as string,",
				"          originalTitle as string,",
				"          isAdult as integer,",
				"          startYear as string,",
				"          endYear as string,",
				"          runtimeMinutes as short,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          tconst as string,",
				"          parentTconst as string,",
				"          seasonNumber as integer,",
				"          episodeNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2",
				"source1, source2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 keyGenerate(output(EpisodeKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join1 select(mapColumn(",
				"          titleType,",
				"          primaryTitle,",
				"          originalTitle,",
				"          isAdult,",
				"          startYear,",
				"          endYear,",
				"          runtimeMinutes,",
				"          genres,",
				"          tconst = source2@tconst,",
				"          parentTconst,",
				"          seasonNumber,",
				"          episodeNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EPISODEKEY as decimal(10,0),",
				"          TITLEKEY as decimal(10,0),",
				"          SEASONNUMBER as decimal(38,0),",
				"          EPISODENUMBER as decimal(38,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          EPISODEKEY = EpisodeKey,",
				"          TITLEKEY,",
				"          SEASONNUMBER = seasonNumber,",
				"          EPISODENUMBER = episodeNumber",
				"     )) ~> sink1"
			]
		}
	}
}