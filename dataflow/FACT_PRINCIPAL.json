{
	"name": "FACT_PRINCIPAL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable42",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable26",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable27",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable40",
						"type": "DatasetReference"
					},
					"name": "FCTPRINCIPAL"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable43",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable40",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TCONST as string,",
				"          ORDERING as decimal(38,0),",
				"          NCONST as string,",
				"          CATEGORY as string,",
				"          JOB as string,",
				"          CHARACTERS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          TITLEKEY as decimal(10,0),",
				"          TCONST as string,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as boolean,",
				"          STARTYEAR as decimal(38,0),",
				"          ENDYEAR as decimal(38,0),",
				"          RUNTIMEMINUTES as decimal(38,0),",
				"          GENRES as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"source(output(",
				"          NAMEKEY as decimal(10,0),",
				"          NCONST as string,",
				"          PRIMARYNAME as string,",
				"          BIRTHYEAR as decimal(38,0),",
				"          DEATHYEAR as decimal(38,0),",
				"          KNOWNFORTITLES as string,",
				"          STARTDATE as decimal(38,0),",
				"          ENDDATE as decimal(38,0),",
				"          ISCURRENT as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source(output(",
				"          PRINCIPALSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT NVL(MAX(PRINCIPALKEY),0) AS PRINCIPALSK FROM FACT_PRINCIPALS',",
				"     format: 'query') ~> FCTPRINCIPAL",
				"source(output(",
				"          PROFESSIONKEY as decimal(38,0),",
				"          PROFESSIONNAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source4",
				"source1, source2 join(source1@TCONST == source2@TCONST,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source3 join(source1@NCONST == source3@NCONST,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"aggregate1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join2, source4 join(ERROR_FUNCTION('') == PROFESSIONKEY,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, FCTPRINCIPAL join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 aggregate(groupBy(source1@TCONST,",
				"          ORDERING,",
				"          CATEGORY,",
				"          JOB,",
				"          CHARACTERS),",
				"     Count = count(TITLEKEY)) ~> aggregate1",
				"surrogateKey1 derive() ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRINCIPALKEY as decimal(38,0),",
				"          NAMEKEY as decimal(38,0),",
				"          TITLEKEY as decimal(38,0),",
				"          ORDERING as decimal(38,0),",
				"          PROFESSIONKEY as decimal(38,0),",
				"          CATEGORY as string,",
				"          JOB as string,",
				"          CHARACTERS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PRINCIPALKEY = RowNum,",
				"          NAMEKEY,",
				"          TITLEKEY,",
				"          ORDERING = RowNum",
				"     )) ~> sink1"
			]
		}
	}
}